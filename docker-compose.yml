name: HARS
services:
  backend:
      build:
        context: ./Backend
        dockerfile: dockerfile
      image: hars_2025
      container_name: backend
      ports:
        - "8080:8080"
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/HARS
        SPRING_DATASOURCE_USERNAME: admin
        SPRING_DATASOURCE_PASSWORD: ESIT2024
      depends_on:
        db:
          condition: service_healthy
      networks:
        - my-network

  db:
    image: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: HARS
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ESIT2024
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres1-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d HARS"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  routineAgent:
    build:
      context: ./routineAgent
      dockerfile: dockerfile
    image: routine_agent_2025
    container_name: routineAgent
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db2:5433/ROUTINEAGENT
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: ESIT2024
    depends_on:
      db2:
        condition: service_healthy
    networks:
      - my-network

  db2:
    image: postgres
    container_name: postgres2
    ports:
      - "5433:5433"
    environment:
      POSTGRES_DB: ROUTINEAGENT
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ESIT2024
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres2-data:/var/lib/postgresql/data
    command: ["postgres", "-p", "5433"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d ROUTINEAGENT -p 5433 -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  frontend:
    build:
      context: ./Frontend
      dockerfile: dockerfile
    image: frontend_2025
    container_name: frontend
    ports:
      - "8082:80"
    networks:
      - my-network

volumes:
  postgres1-data:
  postgres2-data:

networks:
  my-network:
    driver: bridge
